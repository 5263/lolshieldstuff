/*
  Font drawing library

  Copyright 2009/2010 Benjamin Sonntag <benjamin@sonntag.fr> http://benjamin.sonntag.fr/
  
  History:
  	2010-01-01 - V0.0 Initial code at Berlin after 26C3
  	2010-09-10 - ikkei replaced font data to bit map font
  				 that is similar LCD SC-1602BS Standard Character Pattern
  				 and place to flash memory
  				<ikkei@zeus.eonet.ne.jp> http://blog.goo.ne.jp/jh3kxm
  	2011-08-23 - lamer replaced font data using a custom python skript

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330,
  Boston, MA 02111-1307, USA.
*/



#include "Font.h"
#include "Charliplexing.h"
#include <inttypes.h>
#include <avr/pgmspace.h>

uint8_t dotfont1[][5] PROGMEM = {
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 }
};

uint8_t dotfont2[][5] PROGMEM = {
{ 0xfe, 0x7c, 0x38, 0x10, 0x0 },
{ 0x10, 0x38, 0x7c, 0xfe, 0x0 },
{ 0xc, 0xa, 0x0, 0xc, 0xa },
{ 0xa, 0x6, 0x0, 0xa, 0x6 },
{ 0x88, 0xcc, 0xee, 0xcc, 0x88 },
{ 0x22, 0x66, 0xee, 0x66, 0x22 },
{ 0x38, 0x7c, 0x7c, 0x7c, 0x38 },
{ 0x20, 0x70, 0xa8, 0x20, 0x3e },
{ 0x8, 0x4, 0xfe, 0x4, 0x8 },
{ 0x20, 0x40, 0xfe, 0x40, 0x20 },
{ 0x10, 0x10, 0x54, 0x38, 0x10 },
{ 0x10, 0x38, 0x54, 0x10, 0x10 },
{ 0x80, 0x88, 0x94, 0xa2, 0x80 },
{ 0x80, 0xa2, 0x94, 0x88, 0x80 },
{ 0x40, 0x70, 0x7c, 0x70, 0x40 },
{ 0x4, 0x1c, 0x7c, 0x1c, 0x4 },
{ 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x5f, 0x0, 0x0, 0x0, 0x0 },
{ 0x3, 0x0, 0x3, 0x0, 0x0 },
{ 0x14, 0x7f, 0x14, 0x7f, 0x14 },
{ 0x24, 0x7f, 0x1a, 0x0, 0x0 },
{ 0x24, 0x10, 0x8, 0x24, 0x0 },
{ 0x36, 0x49, 0x26, 0x50, 0x0 },
{ 0x2, 0x1, 0x0, 0x0, 0x0 },
{ 0x3e, 0x41, 0x0, 0x0, 0x0 },
{ 0x41, 0x3e, 0x0, 0x0, 0x0 },
{ 0x14, 0x3e, 0x14, 0x0, 0x0 },
{ 0x8, 0x1c, 0x8, 0x0, 0x0 },
{ 0x40, 0x20, 0x0, 0x0, 0x0 },
{ 0x8, 0x8, 0x8, 0x8, 0x0 },
{ 0x40, 0x0, 0x0, 0x0, 0x0 },
{ 0x60, 0x18, 0x6, 0x0, 0x0 },
{ 0x3e, 0x51, 0x49, 0x3e, 0x0 },
{ 0x42, 0x7f, 0x40, 0x0, 0x0 },
{ 0x42, 0x61, 0x51, 0x4e, 0x0 },
{ 0x22, 0x49, 0x49, 0x36, 0x0 },
{ 0x1c, 0x12, 0x7f, 0x10, 0x0 },
{ 0x27, 0x45, 0x45, 0x39, 0x0 },
{ 0x3c, 0x4a, 0x49, 0x30, 0x0 },
{ 0x1, 0x71, 0x9, 0x7, 0x0 },
{ 0x36, 0x49, 0x49, 0x36, 0x0 },
{ 0x6, 0x49, 0x49, 0x3e, 0x0 },
{ 0x14, 0x0, 0x0, 0x0, 0x0 },
{ 0x34, 0x0, 0x0, 0x0, 0x0 },
{ 0x8, 0x14, 0x22, 0x0, 0x0 },
{ 0x14, 0x14, 0x14, 0x14, 0x0 },
{ 0x22, 0x14, 0x8, 0x0, 0x0 },
{ 0x2, 0x1, 0x59, 0x6, 0x0 },
{ 0x32, 0x49, 0x79, 0x3e, 0x0 },
{ 0x7e, 0x11, 0x11, 0x7e, 0x0 },
{ 0x7f, 0x49, 0x49, 0x36, 0x0 },
{ 0x3e, 0x41, 0x41, 0x22, 0x0 },
{ 0x7f, 0x41, 0x22, 0x1c, 0x0 },
{ 0x7f, 0x49, 0x49, 0x41, 0x0 },
{ 0x7f, 0x9, 0x9, 0x1, 0x0 },
{ 0x3e, 0x41, 0x49, 0x7a, 0x0 },
{ 0x7f, 0x8, 0x8, 0x7f, 0x0 },
{ 0x41, 0x7f, 0x41, 0x0, 0x0 },
{ 0x20, 0x41, 0x3f, 0x1, 0x0 },
{ 0x7f, 0x8, 0x14, 0x63, 0x0 },
{ 0x7f, 0x40, 0x40, 0x40, 0x0 },
{ 0x7f, 0x2, 0xc, 0x2, 0x7f },
{ 0x7f, 0x6, 0x18, 0x7f, 0x0 },
{ 0x3e, 0x41, 0x41, 0x3e, 0x0 },
{ 0x7f, 0x9, 0x9, 0x6, 0x0 },
{ 0x3e, 0x41, 0x31, 0x5e, 0x0 },
{ 0x7f, 0x9, 0x19, 0x66, 0x0 },
{ 0x46, 0x49, 0x49, 0x31, 0x0 },
{ 0x1, 0x7f, 0x1, 0x0, 0x0 },
{ 0x3f, 0x40, 0x40, 0x3f, 0x0 },
{ 0x7f, 0x20, 0x10, 0xf, 0x0 },
{ 0x3f, 0x40, 0x38, 0x40, 0x3f },
{ 0x63, 0x14, 0x8, 0x14, 0x63 },
{ 0x3, 0xc, 0x70, 0xc, 0x3 },
{ 0x61, 0x51, 0x4d, 0x43, 0x0 },
{ 0x7f, 0x41, 0x0, 0x0, 0x0 },
{ 0x6, 0x18, 0x60, 0x0, 0x0 },
{ 0x41, 0x7f, 0x0, 0x0, 0x0 },
{ 0x2, 0x1, 0x2, 0x0, 0x0 },
{ 0x40, 0x40, 0x40, 0x40, 0x0 },
{ 0x1, 0x2, 0x0, 0x0, 0x0 },
{ 0x60, 0x54, 0x78, 0x0, 0x0 },
{ 0x7f, 0x44, 0x38, 0x0, 0x0 },
{ 0x38, 0x44, 0x44, 0x0, 0x0 },
{ 0x38, 0x44, 0x7f, 0x0, 0x0 },
{ 0x38, 0x54, 0x58, 0x0, 0x0 },
{ 0x8, 0x7e, 0x9, 0x0, 0x0 },
{ 0x8c, 0x92, 0x7e, 0x0, 0x0 },
{ 0x7f, 0x4, 0x78, 0x0, 0x0 },
{ 0x7d, 0x0, 0x0, 0x0, 0x0 },
{ 0x80, 0x84, 0x7d, 0x0, 0x0 },
{ 0x7f, 0x10, 0x6c, 0x0, 0x0 },
{ 0x7f, 0x0, 0x0, 0x0, 0x0 },
{ 0x7c, 0x4, 0x38, 0x4, 0x78 },
{ 0x7c, 0x4, 0x78, 0x0, 0x0 },
{ 0x38, 0x44, 0x38, 0x0, 0x0 },
{ 0xfc, 0x24, 0x18, 0x0, 0x0 },
{ 0x18, 0x24, 0xfc, 0x0, 0x0 },
{ 0x7c, 0x8, 0x4, 0x0, 0x0 },
{ 0x48, 0x54, 0x24, 0x0, 0x0 },
{ 0x4, 0x3f, 0x44, 0x0, 0x0 },
{ 0x3c, 0x40, 0x7c, 0x0, 0x0 },
{ 0x7c, 0x20, 0x1c, 0x0, 0x0 },
{ 0x1c, 0x60, 0x10, 0x60, 0x1c },
{ 0x6c, 0x10, 0x6c, 0x0, 0x0 },
{ 0x9c, 0xa0, 0x7c, 0x0, 0x0 },
{ 0x64, 0x54, 0x4c, 0x0, 0x0 },
{ 0x8, 0x36, 0x41, 0x0, 0x0 },
{ 0xff, 0x0, 0x0, 0x0, 0x0 },
{ 0x41, 0x36, 0x8, 0x0, 0x0 },
{ 0x8, 0x8, 0x2a, 0x1c, 0x8 },
{ 0x78, 0x44, 0x42, 0x44, 0x78 },
{ 0xfe, 0x92, 0x92, 0x92, 0x66 },
{ 0xf0, 0x29, 0x27, 0x21, 0xff },
{ 0xee, 0x10, 0xfe, 0x10, 0xee },
{ 0x82, 0x82, 0x92, 0x92, 0x6c },
{ 0xfe, 0x20, 0x10, 0x8, 0xfe },
{ 0xfc, 0x41, 0x22, 0x11, 0xfc },
{ 0x40, 0x82, 0x7e, 0x2, 0xfe },
{ 0xfe, 0x2, 0x2, 0x2, 0xfe },
{ 0x8e, 0x50, 0x20, 0x10, 0xe },
{ 0x7e, 0x40, 0x40, 0x40, 0xfe },
{ 0xe, 0x10, 0x10, 0x10, 0xfe },
{ 0xfc, 0x80, 0xfc, 0x80, 0xfc },
{ 0x7e, 0x40, 0x7e, 0x40, 0xfe },
{ 0x2, 0xfe, 0x90, 0x90, 0x60 },
{ 0xfe, 0x90, 0x60, 0x0, 0xfe },
{ 0x44, 0x92, 0x8a, 0x92, 0x7c },
{ 0x70, 0x88, 0x90, 0x60, 0x98 },
{ 0xc0, 0xc0, 0xfe, 0x4, 0x18 },
{ 0xfe, 0x2, 0x2, 0x2, 0x6 },
{ 0x88, 0x78, 0x8, 0xf8, 0x88 },
{ 0xc6, 0xaa, 0x92, 0x82, 0x82 },
{ 0x70, 0x88, 0x88, 0x78, 0x8 },
{ 0x60, 0x60, 0x3f, 0xc5, 0xfe },
{ 0x10, 0x8, 0x78, 0x88, 0x4 },
{ 0x20, 0x3c, 0x7e, 0x3c, 0x20 },
{ 0x7c, 0x92, 0x92, 0x92, 0x7c },
{ 0xb8, 0xc4, 0x4, 0xc4, 0xb8 },
{ 0x60, 0x94, 0x8a, 0x92, 0x64 },
{ 0x30, 0x28, 0x10, 0x28, 0x18 },
{ 0x38, 0x7c, 0xf8, 0x7c, 0x38 },
{ 0x50, 0xa8, 0xa8, 0x88, 0x40 },
{ 0xfc, 0x2, 0x2, 0x2, 0xfc },
{ 0xfe, 0xfe, 0x0, 0xfe, 0xfe },
{ 0xf2, 0x0, 0x0, 0x0, 0x0 },
{ 0x38, 0x44, 0xfe, 0x44, 0x20 },
{ 0x90, 0x7c, 0x92, 0x82, 0x40 },
{ 0x44, 0x38, 0x28, 0x38, 0x44 },
{ 0x2a, 0x2c, 0xf8, 0x2c, 0x2a },
{ 0xee, 0x0, 0x0, 0x0, 0x0 },
{ 0x40, 0x94, 0xaa, 0x52, 0x4 },
{ 0x50, 0x90, 0x7c, 0x12, 0x14 },
{ 0xfe, 0x82, 0xba, 0x92, 0xfe },
{ 0x90, 0xaa, 0xaa, 0xaa, 0xbc },
{ 0x10, 0x28, 0x54, 0x28, 0x44 },
{ 0xfe, 0x10, 0x7c, 0x82, 0x7c },
{ 0x8c, 0x52, 0x32, 0x12, 0xfe },
{ 0xfe, 0x82, 0xca, 0xa2, 0xfe },
{ 0xc, 0xa, 0x0, 0x0, 0x0 },
{ 0xe, 0x11, 0x11, 0xe, 0x0 },
{ 0x88, 0x88, 0xbe, 0x88, 0x88 },
{ 0x12, 0x19, 0x15, 0x12, 0x0 },
{ 0x11, 0x15, 0x15, 0xa, 0x0 },
{ 0x7f, 0x5, 0x25, 0xf2, 0xa0 },
{ 0xfe, 0x20, 0x20, 0x10, 0x3e },
{ 0xc, 0x12, 0x12, 0xfe, 0xfe },
{ 0x30, 0x30, 0x0, 0x0, 0x0 },
{ 0x70, 0x88, 0x60, 0x88, 0x70 },
{ 0x12, 0x1f, 0x10, 0x0, 0x0 },
{ 0x9c, 0xa2, 0xa2, 0xa2, 0x9c },
{ 0x44, 0x28, 0x54, 0x28, 0x10 },
{ 0x17, 0x68, 0x54, 0xfa, 0x41 },
{ 0x17, 0x8, 0x94, 0xca, 0xb1 },
{ 0x15, 0x1f, 0x60, 0x50, 0xf8 },
{ 0x60, 0x90, 0x8a, 0x80, 0x40 },
{ 0xf0, 0x29, 0x26, 0x28, 0xf0 },
{ 0xf0, 0x28, 0x26, 0x29, 0xf0 },
{ 0xf0, 0x2a, 0x29, 0x2a, 0xf0 },
{ 0xf2, 0x29, 0x29, 0x2a, 0xf1 },
{ 0x79, 0x14, 0x14, 0x79, 0x0 },
{ 0xf0, 0x2a, 0x2d, 0x2a, 0xf0 },
{ 0xf8, 0x24, 0xfe, 0x92, 0x92 },
{ 0x1e, 0x21, 0xa1, 0xe1, 0x12 },
{ 0xf8, 0xa9, 0xaa, 0xa8, 0x88 },
{ 0xf8, 0xa8, 0xaa, 0xa9, 0x88 },
{ 0xf8, 0xaa, 0xa9, 0xaa, 0x88 },
{ 0xf8, 0xaa, 0xa8, 0xaa, 0x88 },
{ 0x89, 0xfa, 0x88, 0x0, 0x0 },
{ 0x88, 0xfa, 0x89, 0x0, 0x0 },
{ 0x8a, 0xf9, 0x8a, 0x0, 0x0 },
{ 0x8a, 0xf8, 0x8a, 0x0, 0x0 },
{ 0x10, 0xfe, 0x92, 0x82, 0x7c },
{ 0xfa, 0x11, 0x21, 0x42, 0xf9 },
{ 0x78, 0x85, 0x86, 0x84, 0x78 },
{ 0x78, 0x84, 0x86, 0x85, 0x78 },
{ 0x70, 0x8a, 0x89, 0x8a, 0x70 },
{ 0x72, 0x89, 0x89, 0x8a, 0x71 },
{ 0x3d, 0x42, 0x42, 0x3d, 0x0 },
{ 0x44, 0x28, 0x10, 0x28, 0x44 },
{ 0x10, 0xaa, 0xfe, 0xaa, 0x10 },
{ 0x7c, 0x81, 0x82, 0x80, 0x7c },
{ 0x7c, 0x80, 0x82, 0x81, 0x7c },
{ 0x78, 0x82, 0x81, 0x82, 0x78 },
{ 0x3d, 0x40, 0x40, 0x3d, 0x0 },
{ 0x4, 0x8, 0xf2, 0x9, 0x4 },
{ 0x81, 0xff, 0xa4, 0x24, 0x18 },
{ 0x40, 0x3e, 0x1, 0x49, 0x36 },
{ 0x40, 0xa9, 0xaa, 0xa8, 0xf0 },
{ 0x40, 0xa8, 0xaa, 0xa9, 0xf0 },
{ 0x40, 0xaa, 0xa9, 0xaa, 0xf0 },
{ 0x42, 0xa9, 0xa9, 0xaa, 0xf1 },
{ 0x61, 0x54, 0x79, 0x0, 0x0 },
{ 0x40, 0xaa, 0xad, 0xaa, 0xf0 },
{ 0x64, 0x94, 0x78, 0x94, 0x58 },
{ 0x18, 0xa4, 0xe4, 0x24, 0x10 },
{ 0x70, 0xa9, 0xaa, 0xa8, 0x30 },
{ 0x70, 0xa8, 0xaa, 0xa9, 0x30 },
{ 0x70, 0xaa, 0xa9, 0xaa, 0x30 },
{ 0x70, 0xaa, 0xa8, 0xaa, 0x30 },
{ 0x91, 0xfa, 0x80, 0x0, 0x0 },
{ 0x90, 0xfa, 0x81, 0x0, 0x0 },
{ 0x92, 0xf9, 0x82, 0x0, 0x0 },
{ 0x92, 0xf8, 0x82, 0x0, 0x0 },
{ 0x4a, 0xa4, 0xaa, 0xb0, 0x60 },
{ 0xfa, 0x11, 0x9, 0xa, 0xf1 },
{ 0x70, 0x89, 0x8a, 0x88, 0x70 },
{ 0x70, 0x88, 0x8a, 0x89, 0x70 },
{ 0x60, 0x94, 0x92, 0x94, 0x60 },
{ 0x64, 0x92, 0x92, 0x94, 0x62 },
{ 0x39, 0x44, 0x39, 0x0, 0x0 },
{ 0x10, 0x10, 0x54, 0x10, 0x10 },
{ 0x10, 0xa8, 0x7c, 0x2a, 0x10 },
{ 0x78, 0x81, 0x82, 0x40, 0xf8 },
{ 0x78, 0x80, 0x82, 0x41, 0xf8 },
{ 0x78, 0x82, 0x81, 0x42, 0xf8 },
{ 0x3d, 0x40, 0x7d, 0x0, 0x0 },
{ 0x18, 0xa0, 0xa4, 0xa2, 0x78 },
{ 0x82, 0xfe, 0xa8, 0x10, 0x0 },
{ 0xff, 0xff, 0xff, 0xff, 0xff }
};

uint16_t fontMin1=0x0;
uint16_t fontMax1=0xf;
uint16_t fontMin2=0x10;
uint16_t fontMax2=0xff;


uint8_t Font::CharLength(uint16_t letter) {
  uint8_t maxx = 0;
  uint8_t font_data = 0;
  uint8_t i;
  
  if ( letter==' ' ) return 3+2;
  if ( letter<fontMin1 || letter>fontMax2 ) return 0;
  if ( letter>fontMax1 && letter<fontMin2 ) return 0;

  for ( i=0; i<5; i++){
   	if ( letter <= fontMax1 ){
   	  font_data = pgm_read_byte( &(dotfont1[ letter - fontMin1 ][i]));
   	}else{
   	  font_data = pgm_read_byte( &(dotfont2[ letter - fontMin2 ][i]));
   	}
   	if ( font_data != 0 ){
	  if ( i > maxx ){
	    maxx = i;
	  }
	}
  }
  return (maxx+2);
}



uint8_t Font::DrawLine(uint16_t letter,uint8_t x,uint8_t y,uint8_t i,
        uint8_t set) {
  uint8_t font_data = 0;
  uint8_t j;
  
  //if ( letter==' ' ) return 3+2;
  if ( i<5 )
  {
      if ( letter<fontMin1 || letter>fontMax2 ) return 0;
      if ( letter>fontMax1 && letter<fontMin2 ) return 0;

      if ( letter <= fontMax1 ){
        font_data = pgm_read_byte( &(dotfont1[ letter - fontMin1 ][i]));
      }else{
        font_data = pgm_read_byte( &(dotfont2[ letter - fontMin2 ][i]));
      }
      if ( x<14 && x>=0 )
        for ( j=0; j<8; j++ )
          if ( (j+y)<9 && (j+y)>=0 )
            LedSign::Set(x, j+y, ( (font_data >> j) ^ ~set) & 1);
  }
  return ( font_data != 0 );
}

/* -----------------------------------------------------------------  */
/** Draws a figure (0-9). You should call it with set=1, 
 * wait a little them call it again with set=0
 * @param figure is the figure [0-9]
 * @param x,y coordinates, 
 * @param set is 1 or 0 to draw or clear it
 */
 
uint8_t Font::Draw(uint16_t letter,uint8_t x,uint8_t y,uint8_t set) {
  uint8_t maxx = 0;
  uint8_t font_data = 0;
  uint8_t i,j;
  
  if ( letter==' ' ) return 3+2;
  if ( letter<fontMin1 || letter>fontMax2 ) return 0;
  if ( letter>fontMax1 && letter<fontMin2 ) return 0;

  for ( i=0; i<5; i++){
   	if ( letter <= fontMax1 ){
   	  font_data = pgm_read_byte( &(dotfont1[ letter - fontMin1 ][i]));
   	}else{
   	  font_data = pgm_read_byte( &(dotfont2[ letter - fontMin2 ][i]));
   	}
   	if ( font_data != 0 ){
	  if ( i > maxx ){
	    maxx = i;
	  }
	}
	if ( (i+x)<14 && (i+x)>=0 ){
	  for ( j=0; j<8; j++ ){
		if ( (j+y)<9 && (j+y)>=0 ){
		  if ( font_data & (1<<j)){
		    LedSign::Set(i+x, j+y, set);
		  }
		}
	  }
	}
  }
  return (maxx+2);
}



/* -----------------------------------------------------------------  */
/** Draw a figure in the other direction (rotated 90deg)
 * You should call it with set=1, 
 * wait a little them call it again with set=0
 * @param figure is the figure [0-9]
 * @param x,y coordinates, 
 * @param set is 1 or 0 to draw or clear it
*/

uint8_t Font::Draw90(uint16_t letter,uint8_t x,uint8_t y,uint8_t set) {
  uint8_t maxx = 0;
  uint8_t font_data = 0;
  uint8_t i,j;
  
  if ( letter==' ' ) return 3+2;
  if ( letter<fontMin1 || letter>fontMax2 ) return 0;
  if ( letter>fontMax1 && letter<fontMin2 ) return 0;

  for ( i=0; i<5; i++){
   	if (letter <= fontMax1){
   	  font_data = pgm_read_byte( &(dotfont1[ letter - fontMin1 ][i]));
   	}else{
   	  font_data = pgm_read_byte( &(dotfont2[ letter - fontMin2 ][i]));
   	}
	if ( (6-i+y)<9 && (6-i+y)>=0 ){
	  for ( j=0; j<8; j++ ){
	  	if ( font_data & (1<<j)){
		  if ( j > maxx ){
		    maxx = j;
		  }
		  if ( (j+x+1)<14 && (j+x+1)>=0 ){
		    LedSign::Set(j+x+1, 6-i+y, set);
		  }
		}
	  }
	}
  }
  return (maxx+2);
}
